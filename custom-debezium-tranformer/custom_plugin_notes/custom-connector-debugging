connect github https://github.com/apache/kafka/blob/trunk/connect/api/src/main/java/org/apache/kafka/connect/transforms/Transformation.java

chmod -R 777  custom-debezium-tranformer-0.0.1.jar
docker cp custom-debezium-tranformer-0.0.1.jar debezium-connect:/kafka/connect/debezium-transformer/
cp /kafka/connect/debezium-transformer/custom-debezium-tranformer-0.0.1.jar /kafka/connect/

sample logs to check if plugin is loaded

Loading plugin from: /kafka/connect/debezium-transformer/custom-debezium-tranformer-0.0.1.jar   [org.apache.kafka.connect.runtime.isolation.PluginScanner]
2025-03-11 19:15:21 2025-03-11 18:15:21,180 INFO   ||  Registered loader: PluginClassLoader{pluginLocation=file:/kafka/connect/debezium-transformer/custom-debezium-tranformer-0.0.1.jar}   [org.apache.kafka.connect.runtime.isolation.PluginScanner]

#######

### **üîπ Adding Kafka Connect Transformation to META-INF Services**
Your issue might be that **Kafka Connect is not discovering your transformation class** because it requires proper **Service Provider Configuration**.

---

### **üìå Step 1: Add `META-INF/services` File**
You need to create a **service provider configuration file** so Kafka Connect can discover your transformation.

1Ô∏è‚É£ Inside your project, create the following directory structure:
```
src/main/resources/META-INF/services/
```

2Ô∏è‚É£ Inside `META-INF/services/`, create a file named:
```
org.apache.kafka.connect.transforms.Transformation
```

3Ô∏è‚É£ Open the file and add the fully qualified name of your transformation class:
```
com.example.custom_debezium_tranformer.transformer.CustomTransformation
```

---

### **üìå Step 2: Rebuild Your JAR**
After adding the service configuration, rebuild your JAR:
```sh
mvn clean package
```

Or if using Gradle:
```sh
gradle clean build
```

---

### **üìå Step 3: Copy JAR to Kafka Connect**
Copy your newly built JAR to the Kafka Connect container:
```sh
docker cp target/custom-debezium-transformer-0.0.1.jar debezium-connect:/kafka/connect/debezium-transformer/
```

Ensure it's there:
```sh
docker exec -it debezium-connect ls -l /kafka/connect/debezium-transformer/
```

---

### **üìå Step 4: Restart Kafka Connect**
Restart the Kafka Connect container to reload the plugins:
```sh
docker restart debezium-connect
```

Then check available plugins:
```sh
curl -s http://localhost:8083/connector-plugins | jq .
```
Your transformation should now be listed.

---

### **üìå Step 5: Register the Connector**
If your transformation is discovered, re-register your Kafka Connect config:
```sh
curl -X POST -H "Content-Type: application/json" --data @register.json http://localhost:8083/connectors
```

---

### **üéØ Expected Fix**
‚úÖ **Kafka Connect recognizes your custom transformation**
‚úÖ **No more `Class Not Found` errors**
‚úÖ **Transformation appears in `connector-plugins` API**

Try this out and let me know what happens! üöÄ



It looks like you're referring to how Kafka Connect transformations can be discovered and monitored. Here‚Äôs what you need to do:

---

### **‚úÖ Steps to Fix and Register Your Kafka Connect Custom Transformation**

#### **1Ô∏è‚É£ Ensure Proper Service Loader Configuration**
Kafka Connect **discovers transformations** using the Java **Service Provider Interface (SPI)** mechanism. You need to **explicitly register your transformation class**.

üìå **Create a service configuration file**:
Place this file in your project at:
```
src/main/resources/META-INF/services/org.apache.kafka.connect.transforms.Transformation
```
Inside the file, add:
```
com.example.custom_debezium_tranformer.transformer.CustomTransformation
```
This tells Kafka Connect that your transformation class exists.

---

#### **2Ô∏è‚É£ Implement the Kafka Connect Transformation Interface Properly**
Modify your class to ensure it's correctly implementing the `Transformation` interface:
```java
package com.example.custom_debezium_tranformer.transformer;

import org.apache.kafka.common.config.ConfigDef;
import org.apache.kafka.connect.connector.ConnectRecord;
import org.apache.kafka.connect.data.Schema;
import org.apache.kafka.connect.header.Headers;
import org.apache.kafka.connect.transforms.Transformation;
import org.apache.kafka.common.metrics.Monitorable;
import java.util.Map;

public class CustomTransformation<R extends ConnectRecord<R>> implements Transformation<R>, Monitorable {

    @Override
    public R apply(R sourceRecord) {
        if (sourceRecord.value() instanceof org.apache.kafka.connect.data.Struct) {
            Struct kstruct = (Struct) sourceRecord.value();
            String dbOperation = kstruct.getString("op");

            if ("c".equalsIgnoreCase(dbOperation)) {
                Struct after = (Struct) kstruct.get("after");
                String eventId = after.getString("id");
                String eventTopic = after.getString("aggregate_type");
                String eventType = after.getString("type").toLowerCase();
                Long aggregateId = after.getInt64("aggregate_id");
                String payload = after.getString("payload");

                Headers headers = sourceRecord.headers();
                headers.addString("eventId", eventId);
                headers.addString("eventType", eventType);

                return sourceRecord.newRecord(
                        eventTopic, null, Schema.STRING_SCHEMA, aggregateId,
                        null, payload, sourceRecord.timestamp(), headers
                );
            }
        }
        return sourceRecord;
    }

    @Override
    public ConfigDef config() {
        return new ConfigDef();
    }

    @Override
    public void close() {}

    @Override
    public void configure(Map<String, ?> configs) {}

    @Override
    public String getGroupName() {
        return "custom-transformer-group";
    }
}
```
üöÄ **What Changed?**
- ‚úÖ Implemented `Monitorable` to allow Kafka Connect to track metrics.
- ‚úÖ Ensured safe type casting using `instanceof`.
- ‚úÖ Fixed the structure of the transformation.

---

#### **3Ô∏è‚É£ Build and Deploy the JAR**
Run:
```sh
mvn clean package
```
Or:
```sh
gradle clean build
```
Then **copy your JAR to Kafka Connect**:
```sh
docker cp target/custom-debezium-transformer-0.0.1.jar debezium-connect:/kafka/connect/debezium-transformer/
```
Verify:
```sh
docker exec -it debezium-connect ls -l /kafka/connect/debezium-transformer/
```

---

#### **4Ô∏è‚É£ Restart Kafka Connect**
Restart the connector so it loads the new JAR:
```sh
docker restart debezium-connect
```
Then check:
```sh
curl -s http://localhost:8083/connector-plugins | jq .
```
If your transformation appears, it‚Äôs working! üéØ

---

#### **5Ô∏è‚É£ Register Your Connector**
Finally, register your Kafka Connect config:
```json
{
  "name": "my-debezium-connector",
  "config": {
    "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
    "database.hostname": "localhost",
    "database.port": "5432",
    "database.user": "postgres",
    "database.password": "password",
    "database.dbname": "mydb",
    "transforms": "outbox",
    "transforms.outbox.type": "com.example.custom_debezium_tranformer.transformer.CustomTransformation"
  }
}
```
Post it:
```sh
curl -X POST -H "Content-Type: application/json" --data @register.json http://localhost:8083/connectors
```

---

### **‚úÖ Expected Fix**
‚úî **Kafka Connect recognizes your custom transformation**
‚úî **Metrics are enabled via `Monitorable`**
‚úî **No `Class Not Found` errors**

Let me know if you hit any issues! üöÄüî•



Your error message:
```plaintext
java.lang.UnsupportedClassVersionError: com/example/custom_debezium_tranformer/transformer/CustomTransformation has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0
```
indicates a **Java version mismatch** between your compiled JAR and the Kafka Connect runtime.

---

### **üí° Fix: Align Java Versions**
Your **Kafka Connect environment** is using **Java 11** (class file version 55.0), but your **custom JAR is compiled with Java 17** (class file version 61.0).

#### **1Ô∏è‚É£ Find Kafka Connect Java Version**
Run:
```sh
docker exec -it debezium-connect java -version
```
If it shows Java 11, then you need to **recompile your JAR with Java 11**.

---

#### **2Ô∏è‚É£ Set Java Compatibility in `pom.xml` (Maven)**
Modify your `pom.xml` to **target Java 11**:
```xml
<properties>
    <java.version>11</java.version>
</properties>
```
If using **Maven Compiler Plugin**, update:
```xml
<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>11</source>
                <target>11</target>
            </configuration>
        </plugin>
    </plugins>
</build>
```

---

#### **3Ô∏è‚É£ (Alternative) Set Java Version in `build.gradle` (Gradle)**
If using Gradle, modify `build.gradle`:
```gradle
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}
```
or explicitly:
```gradle
compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
```

---

#### **4Ô∏è‚É£ Rebuild the JAR**
Recompile with:
```sh
mvn clean package
```
or:
```sh
gradle clean build
```
Then redeploy the new JAR.

---

#### **5Ô∏è‚É£ Restart Kafka Connect**
Restart Kafka Connect so it reloads the JAR:
```sh
docker restart debezium-connect
```
Verify:
```sh
curl -s http://localhost:8083/connector-plugins | jq .
```
If your transformation appears, the issue is fixed! üéØüî•

---

### **üöÄ Alternative Solution: Upgrade Kafka Connect to Java 17**
If you prefer **not to downgrade your Java version**, upgrade your Kafka Connect environment to Java 17:
```sh
docker run --rm -it --env KAFKA_OPTS="-Djava.version=17" debezium/connect:latest java -version
```
But it's safer to match Kafka's existing Java version (Java 11).

Let me know if you need more help! üöÄ


Your **Kafka Connect container is running Java 11**, but your **custom JAR was compiled with Java 17** (class file version 61.0).

### **‚úÖ Fix: Recompile Your JAR with Java 11**
Since Kafka Connect expects Java 11 (class file version 55.0), you need to **rebuild your JAR targeting Java 11**.

---

### **1Ô∏è‚É£ Update Your Build Configuration**
#### **For Maven (`pom.xml`)**
Modify your `pom.xml`:
```xml
<properties>
    <java.version>11</java.version>
</properties>

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>11</source>
                <target>11</target>
            </configuration>
        </plugin>
    </plugins>
</build>
```
This ensures that your JAR is compiled for **Java 11**.

#### **For Gradle (`build.gradle`)**
Modify `build.gradle`:
```gradle
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}
```
or:
```gradle
compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
```

---

### **2Ô∏è‚É£ Rebuild the JAR**
Run:
```sh
mvn clean package
```
or:
```sh
gradle clean build
```
This will generate a JAR compatible with Java 11.

---

### **3Ô∏è‚É£ Replace the JAR in Kafka Connect**
Copy the newly built JAR to the correct location:
```sh
cp target/custom-debezium-tranformer-0.0.1.jar /kafka/connect/
```
Then restart Kafka Connect:
```sh
docker restart debezium-connect
```

---

### **4Ô∏è‚É£ Verify Plugin Registration**
After restart, check if your transformation is detected:
```sh
curl -s http://localhost:8083/connector-plugins | jq .
```
If it appears, your issue is **fixed! üöÄüî•**

Let me know if you need help!

