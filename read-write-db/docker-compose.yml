---
version: '3.8'
services:
  postgres-write:
    image: postgres:14-alpine
    container_name: postgres-write
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: db_write
      POSTGRES_REPLICATION_USER: repl_user
      POSTGRES_REPLICATION_PASSWORD: repl_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - db-write:/var/lib/postgresql/data
    command: >
      postgres -c wal_level=replica
               -c max_wal_senders=5
               -c hot_standby=on

  # install zookeeper
  zookeeper:
    container_name: zookeeper
    image: zookeeper
    ports:
      - 2181:2181

  # install kafka
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  # install debezium connect
  debezium-connect:
    container_name: custom-debezium-connect
    image: custom-debezium-connect
    hostname: debezium-connect
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_config
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_status
      BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - kafka
      - postgres-write

  # Build custom-debezium-connect. create single topic to stream events
  create-topics:
    image: custom-debezium-connect
    command: bash -c "
      docker exec -t kafka /usr/bin/kafka-topics \
      --create --bootstrap-server :9092 \
      --topic ReadWrite.events \
      --partitions 1 \
      --replication-factor 1"
    depends_on:
      - kafka

  postgres-read:
    image: postgres:14-alpine
    container_name: postgres-read
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: db_read
    ports:
      - "5431:5432"
    volumes:
      - db-read:/var/lib/postgresql/data
#    command: >
#      postgres -c wal_level=replica
#               -c max_wal_senders=5
#               -c hot_standby=on

#  postgres-read:
#    image: postgres:14-alpine
#    container_name: postgres-read
#    restart: always
#    depends_on:
#      - postgres-write
#    environment:
#      POSTGRES_USER: root
#      POSTGRES_PASSWORD: secret
#      POSTGRES_DB: db_read
#      POSTGRES_REPLICATION_USER: repl_user
#      POSTGRES_REPLICATION_PASSWORD: repl_password
#      POSTGRES_HOST_AUTH_METHOD: trust
#      PGDATA: c:/data/docker/postgresql/data
#    ports:
#      - "5431:5432"
#    volumes:
#      - c:/data/docker/postgresql/data:/var/lib/postgresql/data
#    command: >
#      bash -c "
#        rm -rf c:/data/docker/postgresql/data/* &&
#        PGPASSWORD=repl_password pg_basebackup -h postgres-write -U repl_user -D  c:/data/docker/postgresql/data -Fp -Xs -P -R &&
#        echo 'standby_mode = on' >>  c:/data/docker/postgresql/data/recovery.conf &&
#        echo 'primary_conninfo = \"host=postgres-write port=5432 user=repl_user password=repl_password\"' >>  c:/data/docker/postgresql/data/recovery.conf &&
#      echo 'primary_conninfo = 'host=postgres-write port=5432 user=repl_user password=repl_password sslmode=prefer' >>  c:/data/docker/postgresql/data/postgresql.conf "
##    command: >
##      bash -c "
##        rm -rf /data/docker/postgresql/data/* &&
##        chown -R 999:999 /data/docker/postgresql/data || { echo 'Failed to set ownership'; exit 1; } &&
##        PGPASSWORD=repl_password pg_basebackup -h postgres-write -U repl_user -D /data/docker/postgresql/data -Fp -Xs -P -R &&
##        echo 'standby_mode = on' >> /data/docker/postgresql/data/recovery.conf &&
##        echo 'primary_conninfo = \"host=postgres-write port=5432 user=repl_user password=repl_password\"' >> /data/docker/postgresql/data/recovery.conf"
##    command: >
##      bash -c "
##        rm -rf /var/lib/postgresql/data/* &&
##        chown -R 999:999 /var/lib/postgresql/data || { echo 'Failed to set ownership'; exit 1; } &&
##        PGPASSWORD=repl_password pg_basebackup -h postgres-write -U repl_user -D /var/lib/postgresql/data -Fp -Xs -P -R &&
##        echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf &&
##        exec su-exec postgres postgres"

volumes:
  db-write:
  db-read: