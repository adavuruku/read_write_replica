---
version: '3.8'
services:
  postgres-write:
    image: postgres:14-alpine
    container_name: postgres-write
    hostname: postgres-write
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: db_write
      POSTGRES_REPLICATION_USER: repl_user
      POSTGRES_REPLICATION_PASSWORD: repl_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - db-write:/var/lib/postgresql/data
    networks: [ "microservices" ]
    command: >
      postgres -c wal_level=logical
               -c max_wal_senders=5
               -c max_replication_slots=5
               -c hot_standby=off

  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    image: confluentinc/cp-zookeeper:7.0.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: [ "microservices" ]

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka
    restart: always
    ports:
      - "9092:9092"
      - "29092:29092"
      - "29093:29093"  # Change this from 29092 to 29093
    environment:
      JAVA_TOOL_OPTIONS: "-XX:-UseContainerSupport"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    networks: [ "microservices" ]


  debezium-connect:
    container_name: debezium-connect
    hostname: debezium-connect
    image: debezium/connect:2.5
    restart: always
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_config
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_status
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/kafka/connect,/kafka/connect/debezium-transformer"
    volumes:
      - ~/debezium-custom-plugins:/kafka/connect/debezium-transformer
    networks: [ "microservices" ]
    depends_on:
      - kafka
      - postgres-write

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8086:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    networks: [ "microservices" ]

  postgres-read:
    image: postgres:14-alpine
    container_name: postgres-read
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: db_read
    ports:
      - "5431:5432"
#    networks: [ "microservices" ]
    volumes:
      - db-read:/var/lib/postgresql/data
#    command: >
#      postgres -c wal_level=replica
#               -c max_wal_senders=5
#               -c hot_standby=on

# adding valkey just to practive how to use valkey redis
  valkey:
    image: valkey/valkey:latest
    container_name: valkey
    restart: always
    networks: [ "microservices" ]
    ports:
      - "6380:6379"
    volumes:
      - valkey_data:/data
    command: ["valkey-server", "--save", "60", "1", "--loglevel", "notice"]
#  postgres-read:
#    image: postgres:14-alpine
#    container_name: postgres-read
#    restart: always
#    depends_on:
#      - postgres-write
#    environment:
#      POSTGRES_USER: root
#      POSTGRES_PASSWORD: secret
#      POSTGRES_DB: db_read
#      POSTGRES_REPLICATION_USER: repl_user
#      POSTGRES_REPLICATION_PASSWORD: repl_password
#      POSTGRES_HOST_AUTH_METHOD: trust
#      PGDATA: c:/data/docker/postgresql/data
#    ports:
#      - "5431:5432"
#    volumes:
#      - c:/data/docker/postgresql/data:/var/lib/postgresql/data
#    command: >
#      bash -c "
#        rm -rf c:/data/docker/postgresql/data/* &&
#        PGPASSWORD=repl_password pg_basebackup -h postgres-write -U repl_user -D  c:/data/docker/postgresql/data -Fp -Xs -P -R &&
#        echo 'standby_mode = on' >>  c:/data/docker/postgresql/data/recovery.conf &&
#        echo 'primary_conninfo = \"host=postgres-write port=5432 user=repl_user password=repl_password\"' >>  c:/data/docker/postgresql/data/recovery.conf &&
#      echo 'primary_conninfo = 'host=postgres-write port=5432 user=repl_user password=repl_password sslmode=prefer' >>  c:/data/docker/postgresql/data/postgresql.conf "
##    command: >
##      bash -c "
##        rm -rf /data/docker/postgresql/data/* &&
##        chown -R 999:999 /data/docker/postgresql/data || { echo 'Failed to set ownership'; exit 1; } &&
##        PGPASSWORD=repl_password pg_basebackup -h postgres-write -U repl_user -D /data/docker/postgresql/data -Fp -Xs -P -R &&
##        echo 'standby_mode = on' >> /data/docker/postgresql/data/recovery.conf &&
##        echo 'primary_conninfo = \"host=postgres-write port=5432 user=repl_user password=repl_password\"' >> /data/docker/postgresql/data/recovery.conf"
##    command: >
##      bash -c "
##        rm -rf /var/lib/postgresql/data/* &&
##        chown -R 999:999 /var/lib/postgresql/data || { echo 'Failed to set ownership'; exit 1; } &&
##        PGPASSWORD=repl_password pg_basebackup -h postgres-write -U repl_user -D /var/lib/postgresql/data -Fp -Xs -P -R &&
##        echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf &&
##        exec su-exec postgres postgres"

networks:
  microservices:
    name: microservices
volumes:
  db-write:
  db-read:
  debezium-custom-plugins:
  valkey_data:
    driver: local